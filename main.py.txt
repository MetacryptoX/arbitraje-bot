import time
import requests
import ccxt
import config

bybit = ccxt.bybit({
    'apiKey': config.API_KEY_A,
    'secret': config.API_SECRET_A,
    'enableRateLimit': True
})

coinex = ccxt.coinex({
    'apiKey': config.API_KEY_B,
    'secret': config.API_SECRET_B,
    'enableRateLimit': True
})

symbols = ['ETH/USDT', 'SOL/USDT', 'XRP/USDT']
spread_threshold = 0.0075
last_alert = {}


def get_prices(symbol):
    try:
        price_bybit = bybit.fetch_ticker(symbol)['last']
        price_coinex = coinex.fetch_ticker(symbol)['last']
        return price_bybit, price_coinex
    except Exception as e:
        print(f"[ERROR PRECIO] {e}")
        return None, None


def notify_telegram(message):
    try:
        url = f"https://api.telegram.org/bot{config.TELEGRAM_TOKEN}/sendMessage"
        data = {"chat_id": config.TELEGRAM_CHAT_ID, "text": message}
        requests.post(url, data=data)
    except Exception as e:
        print(f"[ERROR TELEGRAM] {e}")


def check_arbitraje():
    for symbol in symbols:
        price_bybit, price_coinex = get_prices(symbol)
        if price_bybit and price_coinex:
            spread = abs(price_bybit - price_coinex) / min(
                price_bybit, price_coinex)
            if spread > spread_threshold:
                if symbol not in last_alert or time.time(
                ) - last_alert[symbol] > 300:
                    mensaje = f"[ARBITRAJE] {symbol}:\nBybit: {price_bybit:.2f}\nCoinEx: {price_coinex:.2f}\nSpread: {spread*100:.2f}%"
                    print(mensaje)
                    notify_telegram(mensaje)
                    last_alert[symbol] = time.time()
            else:
                print(f"Sin arbitraje en {symbol} (spread: {spread:.4f})")
        else:
            print(f"No se pudieron obtener precios para {symbol}")


# Bucle principal
while True:
    check_arbitraje()
    time.sleep(30)
